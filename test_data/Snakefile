samples = ["SRR13686819"]

# Define primers
forward_primer = "TAC[ACT][ACG]GGGT[AT]TCTAATCC"
reverse_primer = "GTG[CT]CAGC[AC]GCCGCGGTAA"


rule all:
    input:
        expand("qc_1/{sample}_1_fastqc.html", sample = samples),
        expand("qc_1/{sample}_2_fastqc.html", sample = samples),
        expand("trim/{sample}_1.fastq.gz", sample = samples),
        expand("trim/{sample}_2.fastq.gz", sample = samples),
        "demux.qza", "demux.qzv", "repseqs.qza",
        "feature_table.qza", "dada2_stats.qza",
        "table.qzv", "repseqs.qzv", 
	"rooted_tree.qza", "aligned-rep-seqs.qza", 
	"masked-aligned-rep-seqs.qza",
        "unrooted-tree.qza", "rooted_tree.qza", 
	"taxonomy.qza", "taxonomy.qzv"


rule create_qc1_directory:
    output:
        directory("qc_1")
    run:
        import os
        os.makedirs("qc_1", exist_ok=True)

rule fastqc1:
    input:
        R1 = "{sample}_1.fastq.gz",
        R2 = "{sample}_2.fastq.gz"
    output:
        "qc_1/{sample}_1_fastqc.html",
        "qc_1/{sample}_2_fastqc.html"
    shell:
        "mamba run -n qc fastqc {input.R1} {input.R2} --outdir qc_1/"

rule bbduk_adapter_qual:
    input:
        adapters = "../adapters.fa",
        f = "{sample}_1.fastq.gz",
        r = "{sample}_2.fastq.gz"
    output:
        "trim/{sample}_1_trim.fastq.gz",
        "trim/{sample}_2_trim.fastq.gz"
    shell:
        "mamba run -n qc bbduk.sh in1={input.f} in2={input.r} out1={output[0]} out2={output[1]} \
        ref={input.adapters} ktrim=r k=23 qtrim=rl trimq=20 mink=11 hdist=1 tpe tbo"

rule bbduk_primer_removal:
    input:
        f = "trim/{sample}_1_trim.fastq.gz",
        r = "trim/{sample}_2_trim.fastq.gz"
    output:
        "trim/{sample}_1.fastq.gz",
        "trim/{sample}_2.fastq.gz"
    params:
        forward_primer = forward_primer,
        reverse_primer = reverse_primer
    shell:
        "mamba run -n qc bbduk.sh in1={input.f} in2={input.r} out1={output[0]} out2={output[1]} \
         literal={params.forward_primer},{params.reverse_primer} copyundefined k=16 mink=7 \
         ktrim=l hdist=1 tpe tbo ignorejunk"

rule create_manifest:
    output:
        "manifest.tsv"
    run:
        with open(output[0], "w") as f:
            f.write("sample-id\tforward-absolute-filepath\treverse-absolute-filepath\n")
            for sample in samples:
                f.write(f"{sample}\t$PWD/trim/{sample}_1.fastq.gz\t$PWD/trim/{sample}_2.fastq.gz\n")

rule import_qza:
    input:
        "manifest.tsv"
    output:
        "demux.qza"
    shell:
        "mamba run -n qiime2 qiime tools import --type 'SampleData[PairedEndSequencesWithQuality]' \
        --input-path {input} --output-path {output} --input-format PairedEndFastqManifestPhred33V2"

rule summarize_demux:
    input:
        "demux.qza"
    output:
        "demux.qzv"
    shell:
        "mamba run -n qiime2 qiime demux summarize --i-data {input} --o-visualization {output}"

rule dada2:
    input:
        "demux.qza"
    output:
        "repseqs.qza",
        "feature_table.qza",
        "dada2_stats.qza"
    shell:
        "mamba run -n qiime2 qiime dada2 denoise-paired --i-demultiplexed-seqs {input} \
        --p-trunc-len-f 0 --p-trunc-len-r 0 --p-n-threads 20 \
        --o-representative-sequences {output[0]} \
        --o-table {output[1]} --o-denoising-stats {output[2]}"

rule summary_table_dada2:
    input:
        "feature_table.qza"
    output:
        "table.qzv"
    shell:
        "mamba run -n qiime2 qiime feature-table summarize --i-table {input} --o-visualization {output}"

rule summary_repseq_dada2:
    input:
        "repseqs.qza"
    output:
        "repseqs.qzv"
    shell:
        "mamba run -n qiime2 qiime feature-table tabulate-seqs --i-data {input} --o-visualization {output}"

rule phylogeny:
    input:
        "repseqs.qza"
    output:
        alignment="aligned-rep-seqs.qza",
        masked_alignment="masked-aligned-rep-seqs.qza",
        tree="unrooted-tree.qza",
        rooted_tree="rooted_tree.qza"
    shell:
        "mamba run -n qiime2 qiime phylogeny align-to-tree-mafft-fasttree \
            --i-sequences {input} \
            --o-alignment {output.alignment} \
            --o-masked-alignment {output.masked_alignment} \
            --o-tree {output.tree} \
            --o-rooted-tree {output.rooted_tree}"

rule taxonomy:
    input:
        classifier = "../classifiers/silva138.1_AB_V4_classifier.qza",  # Path to the classifier
        repseqs = "repseqs.qza"  # Path to your sequence file
    output:
        "taxonomy.qza"
    shell:
        "mamba run -n qiime2 qiime feature-classifier classify-sklearn \
        --i-classifier {input.classifier} \
        --i-reads {input.repseqs} \
        --o-classification {output} \
        --p-n-jobs 8"

rule tabulate_taxonomy:
    input:
        "taxonomy.qza"
    output:
        "taxonomy.qzv"
    shell:
        "mamba run -n qiime2 qiime metadata tabulate \
        --m-input-file {input} \
        --o-visualization {output}"
